************************Window Handle***********************
Selenium treat windows and tabs in the same way. It means in selenium windows and tabs are the same. Every window and tab when open,they
have a unique code associate with them. this unique code is called window handle.
****************Selenium Class07**************

************** Window Handles*****************

Handling multiple windows:
In order to handle multiple windows we will be using:
getWindowHandle()
getWindowHandles()

WindowHandle:
is a unique ID that holds the address of the window or a tab
It is approximately 40 alphanumeric character ID
*************************Waits***************************************
Synchronization:
 is the process of bringing the speed of two or ore components to the same level
 in this case we are bringing our script and page load to the same speed level

 Thread.sleep() -- static wait / unconditional wait

***************Implicit wait***************

 Implicit wait:
 it tells the webdriver to wait for a certain amount of time before throwing an exception
 it will only be written once and will be applied to the whole session of the execution
 We can say that implicit wait is a global wait

 Implicit wait is usually set to 20 seconds. If your element is found in any time between the remaining
 time, that time will be ignored and your script will move on to the next line or action

 If the element is not found in a given time, ONLY then you will get an exception

Syntax:
driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);


---.........Revision------------------
Window Handles


1.each window has a unique code --> window handle

so we know that which window handle belongs to ehich window?
No.


driver .getWndowHandles ---> Set<String>

in order to find our desired window handle we loop through each handle

we switch to the first handle
we get the title
we see if it is our desired title
if yes break ; if no continue



-------------------------
Implicit wait


implicit wait is going to wait --> until --> The weBelement is found in DOM
if teh web element is not found in the DOM  --> it will give us an exception No such element after TIME OUT

------------
===================================
My own note:
why some times the code is not working without sleep?
the reason why we are not using thread.sleep
1) we don't know the nature of weight( time of weight) oer weight is dynamic we don't know how much time it is going to take
2) Even the element is found it is still waiting which we don't want
Implicit wait will not wait after the web element is found

Implicite wait is not working when the code is in DOM but not in the UI. In this situation we are using explicit wait